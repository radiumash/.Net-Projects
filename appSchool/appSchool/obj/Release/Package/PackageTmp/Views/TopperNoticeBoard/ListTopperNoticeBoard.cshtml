@using appSchool.Repositories
@using appSchool.ViewModels

@if (ViewData["ClassIDForStudentRemark"] == null)
{
    ViewData["ClassIDForStudentRemark"] = 0;
}
@if (ViewData["SessionIDForStudentRemark"] == null)
{
    ViewData["SessionIDForStudentRemark"] = 0;
}
@*@if (ViewData["YearIDForStudentRemark"] == null)
    {
        ViewData["YearIDForStudentRemark"] = 0;
    }
    @if (ViewData["SemIDForStudentRemark"] == null)
    {
        ViewData["SemIDForStudentRemark"] = 0;
    }*@

@if (ViewData["pStudStatus"] == null)
{
    ViewData["pStudStatus"] = 10;
}



@{ var gridView = Html.DevExpress().GridView(gridViewSettings =>
    {
        gridViewSettings.Name = "GridTopperNoticeBoard";
        gridViewSettings.KeyFieldName = "StudentID";

        gridViewSettings.CallbackRouteValues = new { Controller = "TopperNoticeBoard", Action = "PartialGridTopperNoticeBoard", PClassID = ViewData["ClassIDForStudentRemark"], PSessionID = ViewData["SessionIDForStudentRemark"], pStudStatus = ViewData["pStudStatus"] };

        gridViewSettings.EnablePagingGestures = AutoBoolean.False;

        gridViewSettings.ControlStyle.CssClass = "grid-view";
        gridViewSettings.Width = Unit.Percentage(100);

        gridViewSettings.Styles.Cell.Wrap = DefaultBoolean.False;
        gridViewSettings.Styles.PagerBottomPanel.CssClass = "pager";
        gridViewSettings.Styles.FocusedRow.CssClass = "focused";

        gridViewSettings.Settings.VerticalScrollBarMode = ScrollBarMode.Hidden;
        gridViewSettings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
        gridViewSettings.Settings.ShowHeaderFilterButton = true;
        gridViewSettings.Styles.AlternatingRow.Enabled = DevExpress.Utils.DefaultBoolean.True;

        gridViewSettings.SettingsPager.PageSize = 15;
        gridViewSettings.SettingsPager.EnableAdaptivity = true;
        gridViewSettings.SettingsPager.PageSizeItemSettings.Visible = true;

        gridViewSettings.SettingsExport.EnableClientSideExportAPI = true;
        gridViewSettings.SettingsExport.ExportSelectedRowsOnly = true;

        gridViewSettings.SettingsPopup.EditForm.SettingsAdaptivity.MaxWidth = 800;
        gridViewSettings.SettingsPopup.EditForm.SettingsAdaptivity.Mode = PopupControlAdaptivityMode.Always;
        gridViewSettings.SettingsPopup.EditForm.SettingsAdaptivity.VerticalAlign = PopupAdaptiveVerticalAlign.WindowCenter;


        gridViewSettings.CommandColumn.Visible = true;
        gridViewSettings.CommandColumn.ShowSelectCheckbox = true;
        gridViewSettings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.AllPages;
        gridViewSettings.CommandColumn.VisibleIndex = 0;
        gridViewSettings.CommandColumn.Width = Unit.Pixel(52);

        gridViewSettings.Columns.Add("StudentID").Visible = false;
        gridViewSettings.Columns.Add(column =>
        {
            column.FieldName = "FullName";
            column.Caption = "Name";
            column.ToolTip = "Click to Sort";
            column.Width = Unit.Pixel(230);
        });
        gridViewSettings.Columns.Add(column =>
        {
            column.FieldName = "FatherName";
            column.Caption = "Father Name";
            column.ToolTip = "Click to Sort";
            column.ReadOnly = true;
            column.Width = Unit.Pixel(210);
        });
        gridViewSettings.Columns.Add(column =>
        {
            column.FieldName = "ClassID";
            column.Caption = "Class";
            column.ToolTip = "Click to Sort";
            column.Width = Unit.Pixel(80);

            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = (new ClassRepository()).GetClassList(byte.Parse(Session["CompID"].ToString()), byte.Parse(Session["BranchID"].ToString()));
            comboBoxProperties.TextField = "ClassName";
            comboBoxProperties.ValueField = "ClassID";
            comboBoxProperties.ValueType = typeof(int);
        });
      


        gridViewSettings.ClientSideEvents.SelectionChanged = "topperNoticeBoardController.RowSelectionChange";

        gridViewSettings.CellEditorInitialize = (s, e) =>
        {
            ((ASPxEdit)e.Editor).ValidationSettings.Display = Display.Dynamic;
        };


    });
    if (ViewBag.GeneralError != null)
    {
        gridView.SetEditErrorText(ViewBag.GeneralError);
    } }

@gridView.Bind(Model).GetHtml()